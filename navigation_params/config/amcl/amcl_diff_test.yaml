# http://wiki.ros.org/amcl

min_particles: 100 # (минимально допустимое количество частиц)
max_particles: 500 # (максимально допустимое количество частиц)
kld_err: 0.02 # (максимальная ошибка между истинным распределением и расчетным распределением)
kld_z: 0.99 # (верхний стандартный нормальный квантиль для (1 - p), где p - вероятность того,
# что ошибка в оцененном распределении будет меньше, чем kld_err)
update_min_d: 0.2 # (поступательное движение, необходимое перед выполнением обновления фильтра)
update_min_a: 0.2 # (вращательное движение, необходимое перед выполнением обновления фильтра)
resample_interval: 1 # (количество обновлений фильтра, необходимых перед повторной выборкой)
transform_tolerance: 0.5 # (время, с помощью которого можно перенести дату опубликованного преобразования,
# чтобы указать, что это преобразование действительно в будущем)
recovery_alpha_slow: 0.0 # (экспоненциальная скорость затухания для фильтра медленного среднего веса, используемого при принятии решения о том,
# когда восстанавливаться, добавляя случайные позы. Хорошим значением может быть 0,001)
recovery_alpha_fast: 0.0 # (экспоненциальная скорость затухания для фильтра быстрого среднего веса, используемого при принятии решения о том,
# когда восстанавливаться, добавляя случайные позы. Хорошим значением может быть 0.1)

initial_pose_x: 0.0 # (начальное значение позы (x), используемое для инициализации фильтра с распределением по Гауссу)
initial_pose_y: 0.0 # (начальное значение позы (y), используемое для инициализации фильтра с распределением по Гауссу)
initial_pose_a: 0.0 # (начальное значение положения (рыскание), используемое для инициализации фильтра с распределением по Гауссу)
# initial_cov_xx: # (начальная ковариация позы (x*x), используемая для инициализации фильтра с распределением по Гауссу)
# initial_cov_yy: # (начальная ковариация позы (y*y), используемая для инициализации фильтра с распределением по Гауссу)
# initial_cov_aa: # (начальная ковариация позы (рыскание*рыскание), используемая для инициализации фильтра с распределением по Гауссу)

gui_publish_rate: 50.0 # (максимальная частота (Гц), с которой сканы и пути публикуются для визуализации, -1.0 для отключения)
# save_pose_rate: 0.5 # (максимальная частота (Гц), с которой последняя оцененная позиция и ковариация сохраняются на сервере
# параметров в переменных ~initial_pose_* и ~initial_cov_*. эта сохраненная позиция будет использоваться
# при последующих запусках для инициализации фильтра. -1.0 для отключения.\)
use_map_topic: false # ОТЛИЧАЕТСЯ ОТ ИСХОДНИКА (true) (если установлено значение true, AMCL подпишется на раздел карты,
# а не будет выполнять вызов службы для получения своей карты)
first_map_only: false # ОТЛИЧАЕТСЯ ОТ ИСХОДНИКА (true) (Если установлено значение true, AMCL будет использовать только первую карту,
# на которую он подписался, вместо того, чтобы обновлять ее каждый раз при получении новой.)
# selective_resampling:  # (eсли установлено значение true, это уменьшит частоту повторной выборки, когда в этом нет необходимости,
# и поможет избежать потери частиц. повторная выборка произойдет только в том случае, если эффективное число частиц
# (N_eff = 1/(sum(k_i ^ 2))) меньше половины текущего числа частиц. cсылка: Гризетти, Джорджио, Сирилл Стахнисс и Вольфрам Бургард.
# "Улучшенные методы отображения сетки с помощью фильтров частиц с рао-блэквеллизацией". IEEE transactions on Robotics 23.1 (2007): 34.)

laser_min_range: -1.0 # (минимальный диапазон сканирования, который следует учитывать; -1.0 приведет к использованию
# заявленной минимальной дальности действия лазера.)
laser_max_range: -1.0 # (максимальный диапазон сканирования, который следует учитывать; -1.0 приведет к использованию
# заявленной максимальной дальности действия лазера.)
laser_max_beams: 180 # (сколько равномерно расположенных лучей в каждом сканировании следует использовать при обновлении фильтра)
laser_z_hit: 0.5 # (этот параметр представляет ожидаемое измерение попадания (т.е. когда лазерный луч успешно обнаруживает препятствие).
# более высокое значение этого параметра увеличит вероятность попадания частицы, когда данные лазерного сканирования совпадут с ожидаемым измерением попадания)
laser_z_short: 0.05 # (этот параметр представляет ожидаемое измерение для короткого считывания (т.е. когда лазерный луч обнаруживает
# препятствие до того, как он достигнет максимальной дальности). более высокое значение этого параметра увеличит вероятность обнаружения частицы,
# когда данные лазерного сканирования совпадут с ожидаемым измерением для короткого считывания)
laser_z_max: 0.05 # (этот параметр представляет максимальную дальность действия лазерного датчика. более высокое значение этого параметра
# уменьшит вероятность обнаружения частицы, когда данные лазерного сканирования превысят этот диапазон)
laser_z_rand: 0.5 # (этот параметр представляет вероятность случайного измерения (т.е. когда лазерный луч не обнаруживает препятствие).
# более высокое значение этого параметра увеличит вероятность обнаружения частицы, когда данные лазерного сканирования совпадут с ожидаемым
# измерением для случайного считывания)
laser_sigma_hit: 0.2 # (этот параметр представляет стандартное отклонение распределения Гаусса, используемого для моделирования шума при
# измерениях попадания. более высокое значение этого параметра увеличит диапазон возможных измерений, которые будут считаться попаданием)
laser_lambda_short: 0.1 # (этот параметр представляет скорость затухания экспоненциального распределения, используемого для моделирования
# коротких показаний. более высокое значение этого параметра увеличит вероятность коротких показаний)
laser_likelihood_max_dist: 2.0 # (этот параметр представляет максимальное расстояние, на котором модель лазерного датчика будет использоваться
# для вычисления вероятности обнаружения частицы. более высокое значение этого параметра увеличит диапазон, в котором будет использоваться модель датчика)
laser_model_type: likelihood_field # (какую модель использовать: beam, likelihood_field или likelihood_field_prob
# (аналогично likelihood_field, но включает функцию beamskip, если она включена))

# если ~odom_model_type равно "diff", то мы используем алгоритм sample_motion_model_odometry из Probabilistic Robotics, стр. 136;
# эта модель использует параметры шума odom_alpha1 - odom_alpha4, как определено в книге.

# если ~odom_model_type равен "omni", то мы используем пользовательскую модель для всенаправленной базы,
# которая использует odom_alpha1 через odom_alpha5. значение первых четырех параметров аналогично значению для модели "diff".
# пятый параметр отражает тенденцию робота перемещаться (без поворота) перпендикулярно наблюдаемому направлению движения.

# была найдена и исправлена ошибка. но исправление старых моделей изменило бы или нарушило бы локализацию уже настроенных систем роботов,
# поэтому новые модели с фиксированной одометрией были добавлены как новые типы "с поправкой на разницу" и "с поправкой на все".
# настройки параметров odom_alpha по умолчанию подходят только для старых моделей, для новой модели эти значения, вероятно,
# должны быть намного меньше, см. http://answers.ros.org/question/227811/tuning-amcls-diff-corrected-and-omni-corrected-odom-models /

# кроме того, была обнаружена еще одна ошибка, но исправлена только после навигации 1.16, в то время как текущая версия Kinetic -
# навигация 1.14.1. эта ошибка затрагивает только роботов с типом "omni" и "omni-corrected", где odom_alpha1 и odom_alpha4 фактически
# поменялись местами. т.е. odom_alpha1 предназначен для перевода шума одометрии от робота поступательное движение, а odom_alpha4
# представляет шум вращения одометрии от вращательного движения робота.

odom_model_type: diff-corrected # (какую модель использовать: "diff", "omni", "diff-corrected" или "omni-corrected")


odom_alpha1: 0.1 # (этот параметр определяет количество шума, которое добавляется к поступательной скорости робота.
# более высокое значение этого параметра приведет к увеличению шума, добавляемого к скорости, что сделает фильтр менее уверенным в положении робота)
odom_alpha2: 0.1 # (этот параметр определяет количество шума, которое добавляется к скорости вращения робота.
# более высокое значение этого параметра приведет к добавлению большего количества шума к угловой скорости, что сделает фильтр менее уверенным в ориентации робота)
odom_alpha3: 0.1 # (этот параметр определяет количество шума, которое добавляется к поступательному перемещению робота.
# более высокое значение этого параметра приведет к увеличению шума, добавляемого к смещению, что сделает фильтр менее уверенным в положении робота)
odom_alpha4: 0.1 # (этот параметр управляет уровнем шума, который добавляется к вращательному перемещению робота.
# более высокое значение этого параметра приведет к тому, что к угловому смещению добавится больше шума, что сделает фильтр менее уверенным в ориентации робота)
odom_alpha5: 0.1 # (этот параметр определяет количество шума, которое добавляется к поступательному ускорению робота.
# более высокое значение этого параметра приведет к увеличению шума, добавляемого к ускорению, что сделает фильтр менее уверенным в положении робота)
# *** важно отметить, что эти параметры связаны с моделью одометрии и используются для учета ошибок в системе одометрии робота ***

odom_frame_id: odom # (какой кадр использовать для одометрии)
base_frame_id: base_link # (какую раму использовать для основания робота)
global_frame_id: map # (название системы координат, опубликованной системой локализации)
tf_broadcast: true # (установите для этого значение false, чтобы amcl не публиковал преобразование между глобальным фреймом и фреймом одометрии)
